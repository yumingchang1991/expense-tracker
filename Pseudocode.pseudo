// ===========================================================================
// ====== ROUTES
// ===========================================================================

Method  Routes                          Description
GET     /                               root path, will redirect to login page if not authenticated, will render records associated with current user if authenticated

GET     /users/register                 register form
POST    /users/register                 register a new user in database
GET     /users/login                    login form
POST    /users/login                    
GET     /users/logout                   logout current user
GET     /users/edit                     edit user form
PUT     /users/edit                     modify a user in database
DELETE  /users/delete                   remove a user from database

GET     /records/new                    new record form
POST    /records                        create a new record in database
GET     /records/:id/edit               edit a record  
PUT     /records/:id                    modify a record in database
DELETE  /records/:id                    delete a record
DELETE  /records                        delete all records associated with current user

// Category?

// Users Process



// too much details if jump into MVC
// ===========================================================================
// ====== Model
// ===========================================================================

{
  string: {
    INDEX: 'index',
    REGISTER: 'register',
    LOGIN: 'login',
    EDIT_USER: 'editUser',
    EDIT_RECORD: 'edirRecord'
  }
}

function genPageOption(user) {

}

function sumRecordsAmount(records as Array) {
  let sum = 0
  for (record of records) {
    sum += record.expense
  }
  return sum
}

function getRecords(userId, category) {
  Record
    .findById(userId)
    .lean()
    .then(user => {
      if (category) {
        user.records = user.records.filter(record => record.category === category)
      }
      return user
    })
    .then(user => {
      view.renderPage(
        model.const.INDEX,
        model.genPageOption(user)
      )
    })
}



// ===========================================================================
// ====== View
// ===========================================================================

can we abstract page options?

const pageOptions = {
  login: {
    dummyUsername: '',
    dummyPassword: '',
  },
  index: {
    totalAmount: model.sumRecordsAmount(records), 
    records: model.getRecords()
  }

}

function renderPage(res, pageOptions) {
  res.render(pageOptions.name, pageOptions[pageOptions.name])
} // this is feasible but how to pass to hanndlebars?

function renderIndexPage(res, indexPageOptions) {

}

function renderRegisterPage(res, registerPageOptions) {

}

function renderEditUserPage(res, editUserPageOptions) {

}

function renderLoginPage(res, loginPageOptions) {

}


// ===========================================================================
// ====== Seeder
// ===========================================================================


// Questions:
// 1. seems like a path like users/:id/logout make more sense. Does it expose security concern if there is userId inside request?
// 2. 